--- sander/file_io_dat.F90	2019-08-31 13:34:09.929349615 -0400
+++ sander/file_io_dat.F90	2019-08-31 12:53:15.505657444 -0400
@@ -9,7 +9,7 @@
 
 ! Size of the file names
 integer, parameter :: MAX_FN_LEN = 256
-integer, parameter :: MAX_LINE_BUF_LEN = 256
+integer, parameter :: MAX_LINE_BUF_LEN = 65664 ! 65536 + 128
 
 ! File names
 character(len=4096) , save :: groupbuffer    ! Buffer for groupfile lines
--- sander/interface.F90	2019-08-31 13:34:09.929349615 -0400
+++ sander/interface.F90	2019-08-31 12:48:48.272491184 -0400
@@ -107,7 +107,7 @@
       integer :: mask_from_ref ! Antoine Marion
 
       ! Character string arrays
-      character(len=256) :: restraintmask
+      character(len=65536) :: restraintmask
       character(len=256) :: bellymask
       character(len=256) :: refc
    end type sander_input
--- sander/nmr.F90	2019-08-31 13:34:09.933349628 -0400
+++ sander/nmr.F90	2019-08-31 13:17:27.853306643 -0400
@@ -892,7 +892,7 @@
 !+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 !+ [Enter a one-line description of subroutine echoin here]
 subroutine echoin(in,iout)
-   
+   use file_io_dat, only : MAX_LINE_BUF_LEN
    
    ! Subroutine ECHO INput
    
@@ -909,7 +909,7 @@
    implicit none
    integer:: i, in, iout
    
-   character(len=256) aa
+   character(len=MAX_LINE_BUF_LEN) aa
 
    ! Echo the standard Amber input lines:
    
--- sander/findmask.F90	2018-12-05 15:34:36.000000000 -0500
+++ sander/findmask.F90	2020-04-09 11:55:02.458760504 -0400
@@ -114,6 +114,7 @@
 !+ parse 'maskstr' and return selected atoms in integer array 'mask'
 subroutine atommask(natom,nres,prnlev,igraph,isymbl,ipres,  &
                     lbres,crd,maskstr,mask) 
+   use file_io_dat, only : MAX_LINE_BUF_LEN
 ! This top level interface routine is called from any 'driver' which
 ! provides access to atoms, residues (names, coordinates, etc.).
 ! It returns a integer mask array mask(i)=1|0, i=1,natom
@@ -133,7 +134,7 @@
    _REAL_, intent(in) :: crd(3*natom)
 
    integer :: i
-   character(len=8192) :: infix, postfix
+   character(len=MAX_LINE_BUF_LEN) :: infix, postfix
    logical :: error
 
    ! check for null input:
@@ -171,13 +172,14 @@
 !++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 !+ mark operand tokens by enclosing them into square brackets [..]
 subroutine tokenize(input, infix)
+   use file_io_dat, only : MAX_LINE_BUF_LEN
 ! operands (i.e. anything in between operators) are enclosed to
 ! square brackets [], such that processing of the 'maskstr' in the
 ! next step (torpn) is easier. Operands are represented by atomic
 ! expressions, such as [@CA], [:LYS,ARG], [:1-10@CB]
    implicit none
    
-   integer, parameter :: BUFLEN=8192
+   integer, parameter :: BUFLEN=MAX_LINE_BUF_LEN
    character(*) input, infix
    character(BUFLEN) buffer
    character(1) symbol
@@ -384,6 +386,7 @@
 !+ evaluate (i.e. fill mask) atom expression   
 subroutine eval(natom,nres,prnlev,igraph,isymbl,ipres,lbres,  &
                 crd,postfix,mask)
+   use file_io_dat, only : MAX_LINE_BUF_LEN
 ! The original 'maskstr' is converted to rpn form in 'postfix'.
 ! This is now split into elementary atom expressions (i.e. the
 ! ones containing only residue (:..) or atom (@..) expressions.
@@ -402,7 +405,7 @@
    
    integer i, j, p, inplen, top, astat, nselatom
    integer prnlev
-   character(8192) buffer, diststr
+   character(MAX_LINE_BUF_LEN) buffer, diststr
    character(1) symbol
    integer, dimension(:,:), allocatable :: stack
    integer, dimension(:), allocatable :: mask1, mask2
--- sander/sander.h	2019-08-31 13:34:09.933349628 -0400
+++ sander/sander.h	2019-08-31 12:27:38.594191554 -0400
@@ -77,7 +77,7 @@
     int mask_from_ref;
 
     // Strings
-    char restraintmask[256];
+    char restraintmask[65536];
     char bellymask[256];
     char refc[256];
 } sander_input;
--- include/md.h	2019-08-31 13:34:09.933349628 -0400
+++ include/md.h	2019-08-31 12:42:00.267426053 -0400
@@ -94,7 +94,7 @@
 ! ... strings:
 
 character(len=4) iwtnm,iowtnm,ihwtnm
-character(len=256) restraintmask,bellymask,tgtfitmask,&
+character(len=65536) restraintmask,bellymask,tgtfitmask,&
             tgtrmsmask,noshakemask,crgmask,iwrap_mask
 common/mds/ restraintmask,bellymask,tgtfitmask,tgtrmsmask,noshakemask,crgmask,  &
             iwtnm,iowtnm,ihwtnm(2),iwrap_mask
